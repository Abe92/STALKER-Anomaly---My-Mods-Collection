--[[
Ascendant Crosshairs
25JAN2021
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
Author: RavenAscendant
--]]



-- Localize some functions
get_color 		= utils_xml.get_color
correct_ratio 	= utils_xml.correct_ratio
move_element 	= utils_xml.move_element




local globalshift = 1
tg_update_step = 20
local square = 50 -- this is divided by the square root of the (distance to the target + 1)  to find the radius of the crosshair
 options = {
	crosshair_enable			= true, -- game crosshair
	custom_crosshair_enable		= true, -- these crosshairs
	ignore_system_crosshair		= false,
	crosshair_texture 			= "ui\\ascendantcrosshairs\\CrosshairRound.dds",
	crosshair_texture_weapon	= "ui\\ascendantcrosshairs\\CrosshairRound.dds",
	crosshair_texture_aim 		= "ui\\ascendantcrosshairs\\CrosshairRound.dds",
	friend_texture				= "ui\\ascendantcrosshairs\\CrosshairFRIENDLY.dds",
	enemy_texture				= "ui\\ascendantcrosshairs\\CrosshairENEMY.dds",
	neutral_texture				= "ui\\ascendantcrosshairs\\CrosshairNEUTRAL.dds",
	color_blind_mode 			= true,
	show_coprse_relation		= false,
	base_color					= GetARGB(255,255,255,255),
--	dynamic_crosshair			= true,
	crosshair_weapon			= true,
	crosshair_noweapon			= true,
	crosshair_aim				= true,
	crosshait_scope				= false, --not a full mode, rather this simply enables aim crosshair with scopes.
	crosshair_weapon_dynamic	= true,
	crosshair_noweapon_dynamic	= true,
	crosshair_aim_dynamic		= true,
	scale						= 50,
	scale_aim					= 50,
	scale_weapon				= 50,
	scale_friend				= 50,
	scale_neutral				= 50,
	scale_enemy 				= 50,
}
crosshairlist = {}
crosshairlistalt = {} 
crosshairltx = nil

function loadsetting()
	readltx()
	
	local curr = get_console_cmd(nil, "g_crosshair_color")
	curr = tostring(curr)
	local r,g,b,a = string.match(curr,"(%d+), (%d+), (%d+), (%d+)")
	options.base_color = GetARGB(a,r,g,b)
	options.crosshair_enable = get_console_cmd(1,"hud_crosshair" )
	options.custom_crosshair_enable = axr_main.config:r_value("options", "video/custom_crosshair/customcrosshair", 1,options.custom_crosshair_enable)
	options.ignore_system_crosshair = axr_main.config:r_value("options", "video/custom_crosshair/ignorgamecrosshairsetting", 1,options.ignore_system_crosshair)
	
	options.color_blind_mode = axr_main.config:r_value("options", "video/custom_crosshair/colorblindmode", 1,options.color_blind_mode)
	options.show_coprse_relation = axr_main.config:r_value("options", "video/custom_crosshair/corpsehostility",1, options.show_coprse_relation)

	--options.dynamic_crosshair = axr_main.config:r_value("options", "video/custom_crosshair/dynamiccrosshair",1, options.dynamic_crosshair)
	options.crosshair_weapon = axr_main.config:r_value("options", "video/custom_crosshair/crosshairweapon",1, options.crosshair_weapon)
	options.crosshair_noweapon = axr_main.config:r_value("options", "video/custom_crosshair/crosshairnoweapon",1, options.crosshair_noweapon)
	options.crosshair_aim = axr_main.config:r_value("options", "video/custom_crosshair/crosshairaim",1, options.crosshair_aim)
	options.crosshair_scope = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscope",1, options.crosshair_scope)

	options.crosshair_weapon_dynamic = axr_main.config:r_value("options", "video/custom_crosshair/crosshairweapondynamic",1, options.crosshair_weapon_dynamic)
	options.crosshair_noweapon_dynamic = axr_main.config:r_value("options", "video/custom_crosshair/crosshairnoweapondynamic",1, options.crosshair_noweapon_dynamic)
	options.crosshair_aim_dynamic = axr_main.config:r_value("options", "video/custom_crosshair/crosshairaimdynamic",1, options.crosshair_aim_dynamic)
	
	options.scale = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale",2, options.scale)
	options.scale_aim = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale_aim",2, options.scale_aim)
	options.scale_weapon = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale_weapon",2, options.scale_weapon)
	
	options.scale_friend = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale_friend",2, options.scale_friend)
	options.scale_neutral = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale_neutral",2, options.scale_neutral)
	options.scale_enemy = axr_main.config:r_value("options", "video/custom_crosshair/crosshairscale_enemy",2, options.scale_enemy)
	
	
	local base = axr_main.config:r_value("options", "video/custom_crosshair/maincrosshair",0, "aa4round") 
	local aim = axr_main.config:r_value("options", "video/custom_crosshair/crosshairaimtexture",0, "same_as_main") 
	local weapon = axr_main.config:r_value("options", "video/custom_crosshair/crosshairweapontexture",0, "same_as_main") 
	local neutral = axr_main.config:r_value("options", "video/custom_crosshair/neutralcrosshair",0, "aa5neutral")
	local enemy = axr_main.config:r_value("options", "video/custom_crosshair/enemycrosshair",0, "aa5enemy")
	local friend = axr_main.config:r_value("options", "video/custom_crosshair/friendcrosshair",0, "aa5friend")
	
	
	
	printf("Raven CCROSS")
	
	options.crosshair_texture	= crosshairltx:r_value(base,"texture",3,"ui\\ascendantcrosshairs\\CrosshairRound.dds")

	if aim == "same_as_main" then
		options.crosshair_texture_aim = options.crosshair_texture
	else
		options.crosshair_texture_aim	= crosshairltx:r_value(aim,"texture",3,"ui\\ascendantcrosshairs\\CrosshairRound.dds")
	end

	if weapon == "same_as_main" then
		options.crosshair_texture_weapon = options.crosshair_texture
	else
		options.crosshair_texture_weapon	= crosshairltx:r_value(weapon,"texture",3,"ui\\ascendantcrosshairs\\CrosshairRound.dds")
	end
	
	
	
	options.friend_texture		= crosshairltx:r_value(friend,"texture",3,"ui\\ascendantcrosshairs\\CrosshairFRIENDLY.dds")
	options.neutral_texture		= crosshairltx:r_value(neutral,"texture",3,"ui\\ascendantcrosshairs\\CrosshairNEUTRAL.dds")
	options.enemy_texture		= crosshairltx:r_value(enemy,"texture",3,"ui\\ascendantcrosshairs\\CrosshairENEMY.dds")
	printf("Raven CCROSS")
	if HUD then
		HUD:Refresh()
	end
end


function savesettings()
	

	
	

end


function readltx()
	if crosshairltx then return end
---	printf("CCROSS pre INI read")
	crosshairltx =  ini_file_ex("plugins\\ascendantcrosshairs\\chbase.ltx")
	--printf("CCROSS past INI read")
	local sections = crosshairltx:get_sections()
	crosshairlistalt[1] = {"same_as_main","same_as_main"}
	for i,sec in ipairs(sections) do
		crosshairlist[#crosshairlist+1] = {sec, crosshairltx:r_value(sec,"name")}
		crosshairlistalt[#crosshairlistalt+1] = {sec, crosshairltx:r_value(sec,"name")}
	end
--printf("CCROSS past INI process: " ..crosshairlistalt[1] )

end
----------------------------------
--	HUD (Custom Crosshair)
----------------------------------

HUD = nil
function activate_hud()
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("on_console_execute",on_console_execute)
	RegisterScriptCallback("GUI_on_show",update_hud)
	RegisterScriptCallback("GUI_on_hide",update_hud)
	
	
	if HUD == nil then
		HUD = UICustomCrosshair()
		get_hud():AddDialogToRender(HUD)
	end
	HUD:Update(true)
end

function deactivate_hud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
	
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	UnregisterScriptCallback("on_console_execute",on_console_execute)
	UnregisterScriptCallback("GUI_on_show",update_hud)
	UnregisterScriptCallback("GUI_on_hide",update_hud)


end

function update_hud()
	if HUD ~= nil then
		HUD:Update(true)
	end
end



function actor_on_net_destroy()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function on_console_execute(name)
	if name == "hud_draw" and HUD then
		HUD:Update(true)
	end
	if name == "hud_crosshair" then
		options.crosshair_enable = get_console_cmd(1,"hud_crosshair" )
	end
	
end

-------
class "UICustomCrosshair" (CUIScriptWnd)

function UICustomCrosshair:__init() super()
	self._tmr = 0
	self.center = {}
	self.red = get_color("red", true)
	self.yellow = get_color("yellow", true)
	self.green = get_color("green", true)
	self.base_color = options.base_color
	self.color_blind = {}
	self.color_blind_scale = {}
	self:InitControls()
end

function UICustomCrosshair:__finalize()
end

function UICustomCrosshair:InitControls()
	
	local xml  = CScriptXmlInit()
	xml:ParseFile("ui_custom_crosshair.xml")


	self.center.x = device().width/2
	self.center.y =  device().height/2

	
-- dialog is an invisible window that contains all the rest of the hud elements. It is hidden and shown to make SidHud behave like the base crosshair as posible with a few exceptions.
	self.dialog = xml:InitStatic("ch", self)
	self.dialog:Show(false)
	--self.dialog:SetWndPos(vector2():set(self.center.x,self.center.y ))
	--correct_ratio(self.dialog)
	self.color_blind[0] = xml:InitStatic("ch:cb_friend", self.dialog)
	self.color_blind[1] = xml:InitStatic("ch:cb_neutral", self.dialog)
	self.color_blind[2] = xml:InitStatic("ch:cb_enemy", self.dialog)
	
	self.def_crosshair = xml:InitStatic("ch:crosshair", self.dialog)
	self.aim_crosshair = xml:InitStatic("ch:crosshair_aim", self.dialog)
	self.weapon_crosshair = xml:InitStatic("ch:crosshair_weapon", self.dialog)
	
	
	self:Refresh()

	
end

function UICustomCrosshair:Clear()
	self.dialog:Show(false)
end

function UICustomCrosshair:Refresh()

	self.center.x = device().width/2
	self.center.y =  device().height/2

	self.color_blind[0]:InitTexture(options.friend_texture)
	self.color_blind[1]:InitTexture(options.neutral_texture)
	self.color_blind[2]:InitTexture(options.enemy_texture)
	
	self.def_crosshair:InitTexture(options.crosshair_texture)
	self.aim_crosshair:InitTexture(options.crosshair_texture_aim)
	self.weapon_crosshair:InitTexture(options.crosshair_texture_weapon)
	
	
	self.base_color = options.base_color

	self.color_blind[0]:Show(false)
	self.color_blind[1]:Show(false)
	self.color_blind[2]:Show(false)
	
	self.color_blind[0]:SetTextureColor(self.base_color)
	self.color_blind[1]:SetTextureColor(self.base_color)
	self.color_blind[2]:SetTextureColor(self.base_color)
	
	self.color_blind_scale[0] = options.scale_friend
	self.color_blind_scale[1] = options.scale_neutral
	self.color_blind_scale[2] = options.scale_enemy

	
	
	self.def_crosshair:Show(false)
	self.aim_crosshair:Show(false)
	self.weapon_crosshair:Show(false)
	self.crosshair = self.def_crosshair
end

function UICustomCrosshair:Update(force)
	CUIScriptWnd.Update(self)
	
	local shift = axr_main.weapon_is_zoomed and 0 or globalshift

	local active_item = db.actor:active_item()
	local is_wpn = active_item and IsWeapon(active_item) or false
	local zoomed = active_item and (IsWeapon(active_item) and active_item:weapon_is_scope())   and axr_main.weapon_is_zoomed or false

	if not options.custom_crosshair_enable or ((not options.crosshair_scope) and zoomed) or (not options.crosshair_enable and not options.ignore_system_crosshair ) or (not (main_hud_shown() or axr_main.weapon_is_zoomed )) or ActorMenu.get_pda_menu():IsShown() or (axr_main.weapon_is_zoomed and not options.crosshair_aim) or (not db.actor:alive()) or (is_wpn and (not (options.crosshair_weapon or axr_main.weapon_is_zoomed) )) or ((not is_wpn) and (not options.crosshair_noweapon)) then
		self:Clear()
		return
	else
		self.dialog:Show(true)
	end
	--dynamic_crosshair =	options.crosshair_noweapon_dynamic
	local dynamic_crosshair = (is_wpn  and  (axr_main.weapon_is_zoomed and options.crosshair_aim_dynamic or (not axr_main.weapon_is_zoomed) and  options.crosshair_weapon_dynamic)) or ((not is_wpn) and ( options.crosshair_noweapon_dynamic))
	local target = level.get_target_obj()
	local relation = target and (target:alive() or options.show_coprse_relation) and target:relation(db.actor ) or 3
	local c_color = self.base_color -- base color by default
	
	--change to relation color
	
	if relation == game_object.enemy then
		c_color = self.red
	elseif relation == game_object.neutral then
		c_color = self.yellow
	elseif relation == game_object.friend then
		c_color = self.green
	end

	self.crosshair:Show(false) -- what ever we were showing last, hide it.
	self.crosshair = self.def_crosshair 	 --set to default
	scale = options.scale
	if is_wpn then
		self.crosshair = self.weapon_crosshair
		scale = options.scale_weapon
	end
		
	
	if axr_main.weapon_is_zoomed then 
		self.crosshair = self.aim_crosshair
		scale = options.scale_aim
	end

	self.crosshair:SetTextureColor(c_color) --set the color of the croshair here because the CB shape crosshairs stay base color
	if	options.color_blind_mode and relation < 3 and relation > -1 then
		self.crosshair = self.color_blind[relation] --if CB mode set to corect shape if over npc/monster
		scale = self.color_blind_scale[relation]
	end

	local dist = level.get_target_dist()
	local crad = dynamic_crosshair and scale/(dist+1)^0.2 or scale/(1)^0.2
	self.crosshair:SetWndRect(Frect():set(self.center.x - crad + shift,self.center.y - crad + shift, self.center.x + crad + shift,self.center.y + crad + shift)) -- these cordiantes are relitive to the anchor of self.dialog which is set to the center of the screen. this makes centering the croshair very simple

	correct_ratio(self.crosshair) --the game does wierd things to the cordinate system to handel more resolutions than it was orginaly made to. without this the crosshair would be streched despite the above looking square. this fixes that.
	self.crosshair:Show(true) -- now that it has been set up show it


end






----------------------------------
--	Callbacks
----------------------------------

local function actor_on_first_update()
	
	activate_hud()

end
tmr = 0
 function actor_on_update()
	
	local tg = time_global()
	
	if force then
		tmr = tg - 1
	end
	if tmr >= tg then

		return
	else
		tmr = tg + tg_update_step
	end
	
	
	if HUD then 
		HUD:Update() 
	end
end
function deathclear()
	if HUD then 	
		HUD:Clear()
	end
end







function inject_options_UI()
	--build the table. Should try not to do this at game start if better callback can be found.
	if (#ui_options.options == 0) then
		ui_options.init_opt_base()
	end
	id_1 = 0
	id_2 = 0
	pos = 0
	for i=1, #ui_options.options do
		if ui_options.options[i].id == "video" then id_1 = i end
	end
	
	ch_options = { id= "custom_crosshair"      	 	,sh=true ,gr={
		{ id= "slide_custom_crosshair"				 ,type= "slide"	  ,link= "ui\\ascendantcrosshairs\\banner.dds"	 ,text= "ui_mm_title_custom_crosshair"		,size= {512,50}		,spacing= 20 },
		{id = "customcrosshair", type = "check", val = 1, def = false},
		{id = "ignorgamecrosshairsetting", type = "check", val = 1, def = false},
		{ id= "line"				 	 ,type= "line"		},
		{id = "crosshairnoweapon", type = "check", val = 1, def = true},
		{id = "maincrosshair", type = "list", val = 0, def = "aa4round", content = crosshairlist},
		{id = "crosshairnoweapondynamic", type = "check", val = 1, def = true},
		{id = "crosshairscale", type = "input", val = 2, def = 50, min = 5, max = 500},
		{ id= "line2"				 	 ,type= "line"		},
		{id = "crosshairweapontexture", type = "list", val = 0, def = "same_as_main", content = crosshairlistalt},
		{id = "crosshairweapon", type = "check", val = 1, def = true},
		{id = "crosshairweapondynamic", type = "check", val = 1, def = true},
		{id = "crosshairscale_weapon", type = "input", val = 2, def = 50, min = 5, max = 500},
		{ id= "line3"				 	 ,type= "line"		},
		{id = "crosshairaimtexture", type = "list", val = 0, def = "same_as_main", content = crosshairlistalt},
		{id = "crosshairaim", type = "check", val = 1, def = false},
		{id = "crosshairaimdynamic", type = "check", val = 1, def = true},
		{id = "crosshairscope", type = "check", val = 1, def = false},
		{id = "crosshairscale_aim", type = "input", val = 2, def = 50, min = 5, max = 500},
		{ id= "line4"				 	 ,type= "line"		},
		{id = "colorblindmode", type = "check", val = 1, def = false, },
		{id = "enemycrosshair", type = "list", val = 0, def = "aa5enemy", content = crosshairlist},
		{id = "crosshairscale_enemy", type = "input", val = 2, def = 50, min = 5, max = 500},
		{id = "friendcrosshair", type = "list", val = 0, def = "aa5friend", content = crosshairlist},
		{id = "crosshairscale_friend", type = "input", val = 2, def = 50, min = 5, max = 500},
		{id = "neutralcrosshair", type = "list", val = 0, def = "aa5neutral", content = crosshairlist},
		{id = "crosshairscale_neutral", type = "input", val = 2, def = 50, min = 5, max = 500},
		{ id= "slide_custom_crosshair2"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair3"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair4"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair5"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair6"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair7"				 ,type= "desc"	  	 ,text= " "		, },
		{ id= "slide_custom_crosshair8"				 ,type= "desc"	  	 ,text= " "		, },

},}
	
	



	table.insert(ui_options.options[id_1].gr, ch_options)

end





function on_game_start()


	loadsetting()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_before_death",deathclear)
	RegisterScriptCallback("on_option_change", loadsetting)
	inject_options_UI()

end







